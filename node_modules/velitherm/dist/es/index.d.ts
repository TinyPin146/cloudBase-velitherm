/**
 * velivole.fr/meteo.guru Basic Thermodynamics Equations for Soaring Flight
 *
 * Copyright © 2022 Momtchil Momtchev <momtchil@momtchev.com>
 *
 * Licensed under the LGPL License, Version 3.0 (the "License")
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at: https://www.gnu.org/licenses/lgpl-3.0.en.html
 *
 * All methods use:
 *
 * Pressure in hPa
 *
 * Temperature in °C
 *
 * Height in meters
 *
 * Relative humidity in % from 0 to 100
 *
 * Specific humidity in g/kg
 *
 * Mixing ratio in g/kg
 */
export declare const velitherm = "velitherm";
/**
 * Earth's average gravity acceleration (m/s2)
 *
 * @const
 * @type {number}
 */
export declare const G = 9.81;
/**
 * The thermal capacity of air (J/kg)
 *
 * @const
 * @type {number}
 */
export declare const Cp = 1005;
/**
 * The enthalpy of vaporization of water (J/kg)
 *
 * @const
 * @type {number}
 */
export declare const L: number;
/**
 * The adiabatic lapse rate of dry air (°C/m)
 *
 * @const
 * @type {number}
 */
export declare const gamma = 0.00976;
/**
 * The average sea level pressure (hPa)
 *
 * @const
 * @type {number}
 */
export declare const P0 = 1013.25;
/**
 * The temperature of the ICAO standard atmosphere (°C)
 *
 * @const
 * @type {number}
 */
export declare const T0 = 15;
/**
 * The specific gas constant of dry air J/(kg*K)
 *
 * @const
 * @type {number}
 */
export declare const Rd = 287.058;
/**
 * The specific gas constant of water vapor J/(kg*K)
 *
 * @const
 * @type {number}
 */
export declare const Rv = 461.495;
/**
 * Molar mass of dry air kg/mol
 *
 * @const
 * @type {number}
 */
export declare const Md = 0.0289652;
/**
 * Molar mass of water vapor kg/mol
 *
 * @const
 * @type {number}
 */
export declare const Mv = 0.018016;
/**
 * Universal gas constant J/(kg*mol)
 *
 * @const
 * @type {number}
 */
export declare const R = 8.31446;
/**
 * Altitude from pressure using the barometric formula and ICAO's definition of standard atmosphere.
 *
 * This is a very rough approximation that is an ICAO standard. It is used when calculating QNH.
 * It does not take into account the pressure and temperature of the day.
 *
 * @param {number} pressure Pressure
 * @param {number} [pressure0] Optional sea-level pressure of the day
 * @returns {number}
 */
export declare function altitudeFromStandardPressure(pressure: number, pressure0?: number): number;
/**
 * Pressure from altitude using the barometric formula and ICAO's definition of standard atmosphere.
 *
 * This is a very rough approximation that is an ICAO standard. It is used when calculating QNH.
 * It does not take into account the pressure and temperature of the day.
 *
 * @param {number} height Height
 * @param {number} [pressure0] Optional sea-level pressure of the day
 * @returns {number}
 */
export declare function pressureFromStandardAltitude(height: number, pressure0?: number): number;
/**
 * Altitude from pressure using the hypsometric formula.
 *
 * This is a better equation that takes into account the pressure and the temperature of the day.
 * It is not a standard and different weather institutions use slightly different parameters.
 * It is used when calculating the QFF.
 *
 * @param {number} pressure Pressure
 * @param {number} [pressure0] Optional sea-level pressure of the day
 * @param {number} [temp] Optional average temperature from the ground to the given level
 * @returns {number}
 */
export declare function altitudeFromPressure(pressure: number, pressure0?: number, temp?: number): number;
/**
 * Pressure from altitude using the hypsometric formula.
 *
 * This is a better equation that takes into account the pressure and the temperature of the day.
 * It is not a standard and different weather institutions use slightly different parameters.
 * It is used when calculating the QFF.
 *
 * @param {number} height Height
 * @param {number} [pressure0] Optional sea-level pressure of the day
 * @param {number} [temp] Optional average temperature from the ground to the given level
 * @returns {number}
 */
export declare function pressureFromAltitude(height: number, pressure0?: number, temp?: number): number;
/**
 * (Saturation) Water vapor pressure.
 *
 * Clausius–Clapeyron equation - the most fundamental equation in weather science.
 *
 * This is the Magnus-Tetens approximation.
 *
 * @param {number} temp Temperature
 * @returns {number}
 */
export declare function waterVaporSaturationPressure(temp?: number): number;
/**
 * Relative humidity from specific humidity.
 *
 * @param {number} specificHumidity Specific humidity
 * @param {number} [pressure] Optional pressure
 * @param {number} [temp] Optional temperature
 * @returns {number}
 */
export declare function relativeHumidity(specificHumidity: number, pressure?: number, temp?: number): number;
/**
 * Dew point from relative humidity.
 *
 * Approximation of the Magnus equation with the Sonntag 1990 coefficients.
 *
 * @param {number} relativeHumidity Relative humidity
 * @param {number} [temp] Optional temperature
 * @returns {number}
 */
export declare function dewPoint(relativeHumidity: number, temp?: number): number;
/**
 * Relative humidity from dew point.
 *
 * Approximation of the Magnus equation with the Sonntag 1990 coefficients.
 *
 * @param {number} dewPoint Relative humidity
 * @param {number} [temp] Optional temperature
 * @returns {number}
 */
export declare function relativeHumidityFromDewPoint(dewPoint: number, temp?: number): number;
/**
 * Mixing ratio from specific humidity.
 *
 * @param {number} specificHumidity Specific humidity
 * @returns {number}
 */
export declare const mixingRatio: (specificHumidity: number) => number;
/**
 * Specific humidity from mixing ratio.
 *
 * @param {number} mixingRatio Mixing ratio
 * @returns {number}
 */
export declare const specificHumidityFromMixingRatio: (mixingRatio: number) => number;
/**
 * Specific humidity from relative humidity.
 *
 * @param {number} relativeHumidity Relative humidity
 * @param {number} [pressure] Optional pressure
 * @param {number} [temp] Optional temperature
 * @returns {number}
 */
export declare function specificHumidity(relativeHumidity: number, pressure?: number, temp?: number): number;
/**
 * Air density.
 *
 * @param {number} relativeHumidity Relative humidity
 * @param {number} [pressure] Optional pressure
 * @param {number} [temp] Optional temperature
 * @returns {number}
 */
export declare function airDensity(relativeHumidity: number, pressure?: number, temp?: number): number;
/**
 * Lifted Condensation Level.
 *
 * This is the altitude at which a mechanically lifted air parcel from the ground will condensate.
 *
 * It corresponds to the cloud base level when the clouds are formed by mechanical lifting.
 *
 * This is the Espy equation with the Stull coefficient.
 *
 * @param {number} temp Temperature at 2m
 * @param {number} dewPoint Dew point at 2m
 * @returns {number}
 */
export declare const LCL: (temp: number, dewPoint: number) => number;
/**
 * Moist adiabatic lapse rate from pressure and temperature.
 *
 * (Roland Stull, Practical Meteorology)
 *
 * @param {number} temp Temperature
 * @param {number} [pressure] Optional pressure
 * @returns {number}
 */
export declare function gammaMoist(temp: number, pressure?: number): number;
